#include "pattern-matrix.hpp"
#include "zmatrix.hpp"

#include <gtest/gtest.h>

// TODO - Rearrangement Refactor + Test Overhaul
// This is a larger test set for the rearrangement of patterns
//  It can take a LONG time to run so it's not recommended to run this test set every time
//  It's recommended to run this test set when the rearrangement code is being updated
//  The base pattern matrix test does some of the easier tests for this and skips the long ones
// Long term, this should be refactored to be more efficient and to check that the correct number of
//  rearrangements are found

// These are a base test set which are guaranteed to be valid
std::map <int, std::vector<std::string>> CASE_TO_VALID_PATTERN_MAP = {
    {
        -1,  // The case where the pattern is not a valid pattern
        {
            "[0,0,0,0,0,2][0,0,0,0,2,0][0,0,0,2,0,0][0,0,2,0,0,0][0,2,0,0,0,0][2,0,0,0,0,0]",
            "[2,0,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0]",
            "[2,2,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0][1,1,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0]",
            "[3,1,1,1,1,1][3,1,1,1,1,1][1,1,1,1,1,1][1,1,1,1,1,1][1,1,1,1,1,1][1,1,1,1,1,1]",
        }
    },
    {
        0,
        {
            "[0,0,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0]",
            "[1,1,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0]",
            "[0,0,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0][1,1,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0]",
            "[1,1,1,1,1,1][1,1,1,1,1,1][1,1,1,1,1,1][1,1,1,1,1,1][1,1,1,1,1,1][1,1,1,1,1,1]",
        }
    },
    {
        1, // "[1,1,0,0,0,0][1,1,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0]"
        {
            "[2,2,0,0,0,0][2,2,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0]",
            "[2,3,0,0,0,0][3,2,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0]",
            "[3,3,0,0,0,0][3,3,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0]",
            "[0,0,0,0,0,0][0,0,3,3,0,0][0,0,0,0,0,0][0,0,3,3,0,0][0,0,0,0,0,0][0,0,0,0,0,0]",
            "[0,0,0,0,0,0][0,0,0,0,0,0][0,2,0,0,2,0][0,0,0,0,0,0][0,2,0,0,2,0][0,0,0,0,0,0]",
        }
    },
    {
        2, // "[1,1,0,0,0,0][1,1,0,0,0,0][1,1,0,0,0,0][1,1,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0]"
        {
            "[2,2,0,0,0,0][2,2,0,0,0,0][2,2,0,0,0,0][2,2,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0]",
            "[2,3,0,0,0,0][3,2,0,0,0,0][2,2,0,0,0,0][3,3,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0]",
            "[3,3,0,0,0,0][3,3,0,0,0,0][3,3,0,0,0,0][3,3,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0]",
            "[0,0,3,0,0,3][0,0,0,0,0,0][0,0,2,0,0,2][0,0,0,0,0,0][0,0,3,0,0,3][0,0,2,0,0,2]",
            // transpose cases
            "[2,2,2,2,0,0][2,2,2,2,0,0][0,0,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0]",
            "[0,0,0,0,0,0][0,0,0,0,0,0][2,0,3,0,2,3][0,0,0,0,0,0][2,0,3,0,2,3][0,0,0,0,0,0]",
        }
    },
    {
        3, // "[1,1,1,1,0,0][1,1,1,1,0,0][1,1,1,1,0,0][1,1,1,1,0,0][0,0,0,0,0,0][0,0,0,0,0,0]"
        {
            "[2,2,2,2,0,0][2,2,2,2,0,0][2,2,2,2,0,0][2,2,2,2,0,0][0,0,0,0,0,0][0,0,0,0,0,0]",
            "[2,3,2,3,0,0][2,2,2,2,0,0][3,3,3,3,0,0][3,2,3,2,0,0][0,0,0,0,0,0][0,0,0,0,0,0]",
            "[3,3,3,3,0,0][3,3,3,3,0,0][3,3,3,3,0,0][3,3,3,3,0,0][0,0,0,0,0,0][0,0,0,0,0,0]",
            "[2,0,3,2,0,3][0,0,0,0,0,0][0,0,0,0,0,0][3,0,3,2,0,2][2,0,2,2,0,2][3,0,3,3,0,3]",
            "[2,3,0,0,2,3][0,0,0,0,0,0][3,3,0,0,2,2][0,0,0,0,0,0][2,2,0,0,2,2][3,3,0,0,3,3]",
        }
    },
    {
        4,  // "[1,1,1,1,0,0][1,1,1,1,0,0][1,1,0,0,0,0][1,1,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0]"
        {
            "[2,2,2,2,0,0][2,2,2,2,0,0][2,2,0,0,0,0][2,2,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0]",
            "[2,3,2,3,0,0][3,2,2,3,0,0][2,2,0,0,0,0][3,3,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0]",
            "[3,3,3,3,0,0][3,3,3,3,0,0][3,3,0,0,0,0][3,3,0,0,0,0][0,0,0,0,0,0][0,0,0,0,0,0]",
            "[2,3,0,0,2,2][3,2,0,0,0,0][0,0,0,0,0,0][3,2,0,0,0,0][0,0,0,0,0,0][2,2,0,0,3,2]",
            "[2,0,3,0,3,2][2,0,3,0,0,0][0,0,0,0,0,0][2,0,3,0,0,0][0,0,0,0,0,0][3,0,2,0,2,2]",
        }
    },
    {
        5, // "[1,1,0,0,0,0][1,1,0,0,0,0][0,0,1,1,0,0][0,0,1,1,0,0][0,0,0,0,0,0][0,0,0,0,0,0]"
        {
            "[2,2,0,0,0,0][2,2,0,0,0,0][0,0,2,2,0,0][0,0,2,2,0,0][0,0,0,0,0,0][0,0,0,0,0,0]",
            "[3,3,0,0,0,0][3,3,0,0,0,0][0,0,3,3,0,0][0,0,3,3,0,0][0,0,0,0,0,0][0,0,0,0,0,0]",
            "[2,3,0,0,0,0][0,0,3,2,0,0][0,0,0,0,0,0][3,2,0,0,0,0][0,0,0,0,0,0][0,0,2,3,0,0]",
            "[0,0,0,0,2,3][0,0,0,0,0,0][0,0,0,0,3,2][3,2,0,0,0,0][2,3,0,0,0,0][0,0,0,0,0,0]",
        }
    },
    {
        6, // "[1,1,1,1,0,0][1,1,1,1,0,0][1,1,0,0,1,1][1,1,0,0,1,1][0,0,0,0,0,0][0,0,0,0,0,0]"
        {
            "[2,2,2,2,0,0][2,2,2,2,0,0][2,2,0,0,2,2][2,2,0,0,2,2][0,0,0,0,0,0][0,0,0,0,0,0]",
            "[3,3,3,3,0,0][3,3,3,3,0,0][3,3,0,0,3,3][3,3,0,0,3,3][0,0,0,0,0,0][0,0,0,0,0,0]",
            "[3,2,3,0,0,3][2,3,0,3,3,0][0,0,0,0,0,0][3,2,0,3,3,0][0,0,0,0,0,0][3,2,3,0,0,3]",
        }
    },
    {
        // Case 7 takes ~2 minutes per pattern to run so only one pattern is included for now
        7, // "[1,1,0,0,0,0][1,1,0,0,0,0][0,0,1,1,0,0][0,0,1,1,0,0][0,0,0,0,1,1][0,0,0,0,1,1]"
        {
            //"[2,2,0,0,0,0][2,2,0,0,0,0][0,0,2,2,0,0][0,0,2,2,0,0][0,0,0,0,2,2][0,0,0,0,2,2]",
            //"[3,3,0,0,0,0][3,3,0,0,0,0][0,0,3,3,0,0][0,0,3,3,0,0][0,0,0,0,3,3][0,0,0,0,3,3]",
            "[2,3,0,0,0,0][0,0,0,0,3,2][0,0,3,3,0,0][3,3,0,0,0,0][0,0,2,3,0,0][0,0,0,0,3,2]",
        }
    },
    {
        // Case 8 takes ~2 minutes per pattern to run so only one pattern is included for now
        8, // "[1,1,1,1,0,0][1,1,1,1,0,0][1,1,0,0,1,1][1,1,0,0,1,1][0,0,1,1,1,1][0,0,1,1,1,1]"
        {
            //"[2,2,2,2,0,0][2,2,2,2,0,0][2,2,0,0,2,2][2,2,0,0,2,2][0,0,2,2,2,2][0,0,2,2,2,2]",
            //"[3,3,3,3,0,0][3,3,3,3,0,0][3,3,0,0,3,3][3,3,0,0,3,3][0,0,3,3,3,3][0,0,3,3,3,3]",
            //"[3,3,0,0,3,2][3,2,3,3,0,0][0,0,2,3,3,3][3,2,3,2,0,0][0,0,3,3,2,3][2,3,0,0,3,3]",
            "[3,3,0,0,3,2][0,0,2,3,3,3][2,3,0,0,3,3][3,2,3,2,0,0][0,0,3,3,2,3][3,2,3,3,0,0]",
        }
    },
};

// TODO - Rearrangement Refactor + Test Overhaul
TEST(PatternMatrixTest,PatternMatrixRearrangeMatrix) {
    GTEST_SKIP() << "Not finished";
    for (auto const& [caseNumber, patterns] : CASE_TO_VALID_PATTERN_MAP) {
        if (caseNumber == -1 || caseNumber == 0) {
            continue;
        }
        std::cout << "Case: " << caseNumber << std::endl;
        for (auto const& pattern : patterns) {
            patternMatrix pm = patternMatrix(1, pattern);
            EXPECT_TRUE(pm.rearrangeMatrix());
            std::cout << "Pattern: " << pattern << " has " << pm.caseRearrangements.size() << " rearrangements" << std::endl;
            bool print = true;
            for (auto const& pair : pm.caseRearrangements) {
                if (!print) {
                    break;
                }
                auto key = pair.first;
                std::cout << key << std::endl;
                print = false;
            }
        }
    }
}
